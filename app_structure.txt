I am developing a django_tenant electronic voting platform. Below are the setups
1. main project is "synergyevote"
    synergyevote.setting.py = """"
Django settings for synergyevote project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


MEDIA_URL = '/uploads/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'uploads')


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-%5^crv50bvma&53y*yha9+#@3yu^z+i@h10+2nu6@!g_(gazba'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

#ALLOWED_HOSTS = ['synergyevote.net', '.synergyevote.net', '127.0.0.1', 'localhost']

#ALLOWED_HOSTS = ['localhost', '127.0.0.1', '*']
ALLOWED_HOSTS = []
# CSRF_TRUSTED_ORIGINS = [ 'https://*' ]
# Application definition

SHARED_APPS = [
    'django_tenants',
    'govote',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_extensions',
]

TENANT_APPS = [
    "clientapp",  # Your tenant-specific app
]

INSTALLED_APPS= SHARED_APPS + [app for app in TENANT_APPS if app not in SHARED_APPS]

MIDDLEWARE = [
    'django_tenants.middleware.TenantMainMiddleware',  # Must be first!
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'synergyevote.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR, 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'synergyevote.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

#using pg Adming localhost
DATABASES = {
    'default': {
        'ENGINE': 'django_tenants.postgresql_backend',  # Required for django-tenants
        'NAME': 'db_synergy_govote',
        'USER': 'postgres',
        'PASSWORD': 'sajetAdmin',
        'HOST': 'localhost',  # Or your database host
        'PORT': 5432,  # Default PostgreSQL port
    }
}

#using docker container 
# DATABASES = {
#     'default': {
#         'ENGINE': 'django_tenants.postgresql_backend',
#         'NAME': 'db_synergy_govote',
#         'USER': 'postgres',
#         'PASSWORD': 'postgres',  # Match with Docker
#         'HOST': 'locahost',  # Use the container name, NOT 'localhost'
#         'PORT': 5432,
#     }
# }

DATABASE_ROUTERS = [
    'django_tenants.routers.TenantSyncRouter',  # Correct syntax
]
# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = '/static/'

# Add this to specify where collected static files will be placed
STATIC_ROOT = BASE_DIR / 'staticfiles'  # Ensure BASE_DIR is set in your settings

# Optionally, if you have custom static files (CSS, JS, images), ensure this is set
STATICFILES_DIRS = [
    BASE_DIR / 'static',  # This should be the path where your custom static files are stored
]

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

TENANT_HOSTNAME = "localhost"  # The default domain for the public schema

TENANT_MODEL = "govote.Client"
TENANT_DOMAIN_MODEL = "govote.Domain"

TENANT_PUBLIC_SCHEMA = "govote.urls"  # Ensure this is set
"
synergyevote.urls.py = """"
URL configuration for synergyevote project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.1/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.conf import settings
from django.urls import path, include
from django.conf.urls.static import static

urlpatterns = [
    path('', include('clientapp.urls')),
] + static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)
"

2. govote app with this models "from django.db import models
from django.utils import timezone
from django_tenants.models import TenantMixin, DomainMixin
# Create your models here.
#############################################################################################
############################ MULTI TENANT SETUP ###################################
# 
# Multi-Tenancy Setup
class Client(TenantMixin):
    name = models.CharField(max_length=500)
    description = models.TextField(default="", null=True, blank=True)
    subdomain = models.CharField(max_length=50, unique=True)  # Ensure unique subdomain
    location = models.CharField(max_length=255, default="", blank=True)
    latitude = models.FloatField(null=True, blank=True)
    longitude = models.FloatField(null=True, blank=True)
    photo = models.ImageField(upload_to='client/photos/', null=True, blank=True, verbose_name="Attach Photo")
    paid_until = models.DateField(default=timezone.now)
    on_trial = models.BooleanField(default=False)
    schema_name = models.CharField(max_length=100, unique=True)  # Schema must be unique
    created_on = models.DateTimeField(default=timezone.now)  # Automatically set timestamp

    class Meta:
        ordering = ['-created_on']  # Sort clients by newest first

    def __str__(self):
        return f"{self.name} ({self.location})"

class Domain(DomainMixin):
    tenant = models.OneToOneField('govote.Client', on_delete=models.CASCADE,related_name="domains")"

govote.views.py = "from django.shortcuts import render
from django.http import HttpResponse
from .models import Client
from .utilities import get_client
# Create your views here.

def index(request):
    return HttpResponse("<h1>Welcome to Synergy Electronic Voting Platform (Synergy EVP)</h1>")


def client_index(request):
    client = get_client(request)
    return render(request, 'client/client.html', {'client':client}) "

govote.urls.py = "from django.conf import settings
from django.conf.urls.static import static
from django.urls import path, include
from django.contrib import admin
from . import views


urlpatterns = [
    path('admin/', admin.site.urls),
    path("", views.index, name='index'),
    path('clients/', views.client_index, name='client'),
]"

govote.utilities.py = "from urllib import request
from .models import Client

def get_client_hostname():
    return request.get_host().split(':')[0].lower()

def get_client(request):
    hostname = get_client_hostname(request)
    submain   = hostname.split('.')[0]
    return Client.objects.filter(submain = submain).first()"

3. clientapp with the following:
    clientapp.models.py = "from django.contrib.auth.models import AbstractUser, User, Group
from django.db import models, transaction
from django.forms import ValidationError
from django.utils import timezone
from decimal import Decimal
from datetime import timedelta
from django.db.models import Sum, F, Value, Subquery, OuterRef, Count
from django.db.models.functions import Coalesce
from geopy.distance import geodesic  # type: ignore # For proximity calculation
from django.utils.timezone import now
from django.core.mail import send_mail
from django.conf import settings
import random
import string

class ActiveStatusModel(models.Model):
    active = models.BooleanField(default=True)

    class Meta:
        abstract = True


class Country(ActiveStatusModel):
    name = models.CharField(max_length=255)
    code = models.CharField(max_length=10, unique=True)
    latitude = models.FloatField(null=True, blank=True)
    longitude = models.FloatField(null=True, blank=True)
    flag = models.ImageField(upload_to='country/flag/', null=True, blank=True, verbose_name="Attach Country Flag") 
    description = models.TextField(default="")   
    created_by = models.ForeignKey("auth.User", on_delete=models.SET_NULL, null=True, related_name='created_countries')
    created_at = models.DateTimeField(default=timezone.now)
    
    class Meta:
        ordering = ['-created_at']
        verbose_name_plural = 'Country'
        
    def __str__(self):
        return self.name 
    
# Model for Region linked to Country
class Region(ActiveStatusModel):
    name = models.CharField(max_length=255)
    code = models.CharField(max_length=10, unique=True)  # ISO country code, e.g., "GR" for Greater Accra
    country = models.ForeignKey(Country, on_delete=models.CASCADE, null=True, blank=True)
    latitude = models.FloatField(null=True, blank=True)
    longitude = models.FloatField(null=True, blank=True)
    description = models.TextField(default="")
    electco = models.IntegerField(default=0)    
    created_by = models.ForeignKey("auth.User", on_delete=models.SET_NULL, null=True, related_name='created_regions')
    created_at = models.DateTimeField(default=timezone.now)
    
    class Meta:
        ordering = ['-created_at']
        verbose_name_plural = 'Regions'
        
    def __str__(self):
        return self.name 
    
# Model for District linked to Region
class District(ActiveStatusModel):
    name = models.CharField(max_length=255)
    code = models.CharField(max_length=10, unique=True, default="")
    region = models.ForeignKey(Region, on_delete=models.CASCADE, null=True, blank=True)
    latitude = models.FloatField(null=True, blank=True)
    longitude = models.FloatField(null=True, blank=True)
    description = models.TextField(default="") 
    electco = models.IntegerField(default=0)    
    created_by = models.ForeignKey("auth.User", on_delete=models.SET_NULL, null=True, related_name='created_districts')
    created_at = models.DateTimeField(default=timezone.now)
    
    class Meta:
        ordering = ['-created_at']
        verbose_name_plural = 'Districts'
        
    def __str__(self):
        return self.name 
    
# Model for City linked to District
class City(ActiveStatusModel):
    name = models.CharField(max_length=255)
    code = models.CharField(max_length=10, unique=True, default="")
    district = models.ForeignKey(District, on_delete=models.CASCADE, null=True, blank=True)
    latitude = models.FloatField(null=True, blank=True)
    longitude = models.FloatField(null=True, blank=True)
    description = models.TextField(default="")  
    electco = models.IntegerField(default=0)    
    created_by = models.ForeignKey("auth.User", on_delete=models.SET_NULL, null=True, related_name='created_cities')
    created_at = models.DateTimeField(default=timezone.now)
        
    class Meta:
        ordering = ['-created_at']
        verbose_name_plural = 'City'
        
    def __str__(self):
        return self.name 
    
# Model for City linked to District
class Title(ActiveStatusModel):
    name = models.CharField(max_length=255)
    code = models.CharField(max_length=10, unique=True, default="")
    description = models.TextField(default="")   
    created_by = models.ForeignKey("auth.User", on_delete=models.SET_NULL, null=True, related_name='created_titles')
    created_at = models.DateTimeField(default=timezone.now)
    
    class Meta:
        ordering = ['-created_at']
        verbose_name_plural = 'Titles'
        
    def __str__(self):
        return self.name 
    
# Model for City linked to District
class Designation(ActiveStatusModel):
    name = models.CharField(max_length=255)
    code = models.CharField(max_length=10, unique=True, default="")
    description = models.TextField(default="")    
    created_by = models.ForeignKey("auth.User", on_delete=models.SET_NULL, null=True, related_name='created_designations')
    created_at = models.DateTimeField(default=timezone.now)
    
    class Meta:
        ordering = ['-created_at']
        verbose_name_plural = 'Designations'
        
    def __str__(self):
        return self.name 
    
# Model for District linked to Region
class Area(ActiveStatusModel):
    name = models.CharField(max_length=255)
    code = models.CharField(max_length=10, unique=True, default="")
    description = models.TextField(default="")    
    created_by = models.ForeignKey("auth.User", on_delete=models.SET_NULL, null=True, related_name='created_areas')
    created_at = models.DateTimeField(default=timezone.now)
    
    class Meta:
        ordering = ['-created_at']
        verbose_name_plural = 'Areas'
        
    def __str__(self):
        return self.name 
    
class Voter(ActiveStatusModel):
    voter_id = models.CharField(max_length=15, unique=True)
    password = models.CharField(max_length=255)  # Hashed
    vpass = models.CharField(max_length=255)  # Second-layer authentication
    firstname = models.CharField(max_length=50)
    lastname = models.CharField(max_length=50)
    email = models.EmailField(unique=True, null=True, blank=True)
    tel = models.CharField(max_length=27, null=True, blank=True)
    country = models.ForeignKey(Country, on_delete=models.SET_NULL, null=True, blank=True)
    region = models.ForeignKey(Region, on_delete=models.SET_NULL, null=True, blank=True)
    district = models.ForeignKey(District, on_delete=models.SET_NULL, null=True, blank=True)
    area = models.ForeignKey(Area, on_delete=models.SET_NULL, null=True, blank=True)
    designation = models.ForeignKey(Designation, on_delete=models.SET_NULL, null=True, blank=True)
    can_vote = models.BooleanField(default=True)
    electco = models.IntegerField(default=0)    
    created_by = models.ForeignKey("auth.User", on_delete=models.SET_NULL, null=True, related_name='created_voters')
    created_at = models.DateTimeField(default=timezone.now)
    
    class Meta:
        ordering = ['-created_at']
        verbose_name_plural = 'Voters List'
        
    def __str__(self):
        return f"{self.firstname} {self.lastname}"
 
class AdminUser(AbstractUser):
    ROLE_CHOICES = [
        ('superadmin', 'Super Admin'),
        ('admin', 'System User'),
        ('electoralCommissioner', 'Electoral Commissioner'),
        ('pollingOfficer', 'Polling Officer'),
    ]
    groups = models.ManyToManyField("auth.Group",related_name="admin_users",blank=True, )
    user_permissions = models.ManyToManyField("auth.Permission", related_name="admin_users", blank=True,)
    role = models.CharField(max_length=25, choices=ROLE_CHOICES)
    
class Election(ActiveStatusModel):
    STATUS_CHOICES = [
        ("open", "Open"),
        ("closed", "Closed"),
        ("pending", "Pending Approval"),
    ]
    name = models.CharField(max_length=255)
    start_date = models.DateTimeField()
    end_date = models.DateTimeField()
    start_time = models.DateTimeField()
    end_time = models.DateTimeField()    
    max_vote = models.IntegerField(default=0)
    golive = models.IntegerField(default=0)
    priority = models.IntegerField(default=0)
    voteYN = models.CharField(max_length=10, choices=[('Yes', 'Yes'), ('No', 'No')], default='')
    instructions =  models.TextField(null=True, blank=True, default="")    
    status = models.CharField(max_length=15, choices=STATUS_CHOICES)   
    electco = models.IntegerField(default=0)    
    created_by = models.ForeignKey("auth.User", on_delete=models.SET_NULL, null=True, related_name='created_elections')
    created_at = models.DateTimeField(default=timezone.now)
    modified_by = models.ForeignKey("auth.User", on_delete=models.SET_NULL, null=True, related_name='modified_elections')
    modified_at = models.DateTimeField()    
    # active = models.BooleanField(default=True)
    
    class Meta:
        ordering = ['-created_at']
        verbose_name_plural = 'Elections'
        
    def __str__(self):
        return f"{self.name} {self.start_date} - {self.end_date}"

class Position(ActiveStatusModel):
    description = models.CharField(max_length=255)
    election = models.ForeignKey(Election, on_delete=models.CASCADE)
    max_vote = models.IntegerField()
    priority = models.IntegerField(default=0)
    voteYN = models.CharField(max_length=10, choices=[('Yes', 'Yes'), ('No', 'No')], default='')
    instructions = models.CharField(max_length=255, default="")
    created_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, related_name='user_created_election')
    created_at = models.DateTimeField(default=timezone.now)
    modified_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, related_name='user_modified_election')
    modified_at = models.DateTimeField() 
    
    class Meta:
        ordering = ['-created_at']
        verbose_name_plural = 'Positions'
        
    def __str__(self):
        return f"{self.description} - {self.election.name}"
    
 
class Candidate(ActiveStatusModel):
    election = models.ForeignKey(Election, on_delete=models.CASCADE)
    title = models.ForeignKey(Title, on_delete=models.CASCADE, null=True, blank=True)
    firstname = models.CharField(max_length=30)
    lastname = models.CharField(max_length=30)
    photo = models.ImageField(upload_to='candidates/', null=True, blank=True)
    created_by = models.ForeignKey("auth.User", on_delete=models.SET_NULL, null=True, related_name='created_positions')
    created_at = models.DateTimeField(default=timezone.now)
    modified_by = models.ForeignKey("auth.User", on_delete=models.SET_NULL, null=True, related_name='modified_positions')
    modified_at = models.DateTimeField() 
    
    class Meta:
        ordering = ['-created_at']
        verbose_name_plural = 'Candidates'
        
    def __str__(self):
        return f"{self.election.name} - {self.title.name} {self.firstname} {self.lastname}"

class Vote(models.Model):
    voter = models.ForeignKey(Voter, on_delete=models.CASCADE)
    candidate = models.ForeignKey(Candidate, on_delete=models.CASCADE)
    election = models.ForeignKey(Election, on_delete=models.CASCADE)
    voteVal = models.CharField(max_length=30)
    timestamp = models.DateTimeField(auto_now_add=True)

    class Meta:
        ordering = ['-timestamp']
        verbose_name_plural = 'Votes'
        
    def __str__(self):
        return f"{self.election.name}"
    
    
class Subscription(ActiveStatusModel):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    plan = models.CharField(max_length=50, choices=[('free', 'Free'), ('pro', 'Pro')])
    active = models.BooleanField(default=True)
    created_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        ordering = ['-created_at']
        verbose_name_plural = 'Subscriptions'
        
    def __str__(self):
        return f"{self.user.first_name} {self.user.last_name} - {self.plan}"
    "

clientapp.views.py = "from django.shortcuts import render
from django.http import HttpResponse
# Create your views here.

def index(request):
    return HttpResponse(f"<h1>{ request.tenant } home page</h1>")
",

clientapp.urls.py = "from django.urls import path
from . import views


urlpatterns = [
    path("", views.index, name='client_index'),
]"


By this setup except for "clientapp.models.py" which is just added, the application runs perfectly.
Example:
1. default application url at http://localhost:8000 shows : "Synergy Electronic Voting Platform (Synergy EVP) () home page"
2. each tenant url at http:aoholdings.localhost:8000 and http://copevote.localhost:8000, shows "The Church of Pentecost Electronic Voting 2025 (Accra, Ghana) home page",
"AO Holdings Ltd Electronic Voting 2025 (One Airport Square Accra, Ghana) home page" respectively.
 now the assistance I need is review the codes
especially for the clientapp.models.py to see if it is appropriate to add these models there or it should be somewhere else.
Again, I want to manage Subscription for each tenant, review the 'Subscription' model in the clientapp.models.py to see if it's in 
order or a modification is need and do so (if modification is needed).
After your review and the modifications done, I want to create apis for both the backend and frontend developers to consumne.
Add "    # Swagger & ReDoc
    path('swagger/', schema_view.with_ui('swagger', cache_timeout=0), name='swagger-ui'),
    path('redoc/', schema_view.with_ui('redoc', cache_timeout=0), name='redoc-ui'),"
 so that team members can access the apis without my interventions.

 Lastly, assist in pushing the codes to github so that, team members can access